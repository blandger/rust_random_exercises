// –†–µ–∞–ª–∏–∑—É–π —Ç–∏–ø AtomicOnceCell<T>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –ø–æ—Ç–æ–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –ª—é–±–æ–µ —á–∏—Å–ª–æ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å–º–æ–≥—É—Ç –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞—Ç—å.
//
// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
//
// –ú–µ—Ç–æ–¥ set_once(&self, value: T) -> bool:
//
// —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑,
//
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏ false, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
//
// –ú–µ—Ç–æ–¥ get(&self) -> Option<&T>:
//
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Some(&T) –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ None.
//
// üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
// –¢–∏–ø T: Send + Sync + 'static
//
// –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ AtomicPtr –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—ë—Ä—Ç–∫—É –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ (–≤—Ä–æ–¥–µ —Ç–≤–æ–µ–π AtomicOption<T>)
//
// –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (Mutex, RwLock –∏ –ø—Ä.)

use std::mem::ManuallyDrop;
use std::sync::atomic::{AtomicPtr, Ordering};

struct AtomicOnceCell<T: Send + Sync> {
    ptr: AtomicPtr<T>,
}
impl<T: Send + Sync> AtomicOnceCell<T> {
    pub fn new() -> AtomicOnceCell<T> {
        AtomicOnceCell {
            ptr: AtomicPtr::new(std::ptr::null_mut()),
        }
    }
    pub fn set_once(&self, value: T) -> bool {
        let boxed = ManuallyDrop::new(Box::new(value));
        let raw = Box::into_raw(ManuallyDrop::into_inner(boxed));

        let prev = self.ptr.compare_exchange(
            std::ptr::null_mut(),
            raw,
            Ordering::AcqRel,
            Ordering::Acquire,
        );

        if prev.is_ok() {
            true
        } else {
            // –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–∏–º–µ—Ä–∞ AtomicOption
            // –ù–ï –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            false
        }
    }
    pub fn get(&self) -> Option<&T> {
        if self.ptr.load(Ordering::SeqCst) == std::ptr::null_mut() {
            None
        } else {
            let ptr = self.ptr.load(Ordering::Acquire);
            unsafe { ptr.as_ref() }
        }
    }
    pub fn is_set(&self) -> bool {
        self.ptr.load(Ordering::SeqCst) != std::ptr::null_mut()
    }
    pub fn get_mut(&mut self) -> Option<&mut T> {
        if self.ptr.load(Ordering::SeqCst) == std::ptr::null_mut() {
            None
        } else {
            let ptr = self.ptr.load(Ordering::Acquire);
            unsafe { ptr.as_mut() }
        }
    }
    pub fn take(self) -> Option<T> {
        let ptr = self.ptr.swap(std::ptr::null_mut(), Ordering::AcqRel);
        if ptr.is_null() {
            None
        } else {
            unsafe { Some(*Box::from_raw(ptr)) }
        }
    }
}
impl<T: Send + Sync> Drop for AtomicOnceCell<T> {
    fn drop(&mut self) {
        let ptr = self.ptr.swap(std::ptr::null_mut(), Ordering::AcqRel);
        if !ptr.is_null() {
            unsafe {
                drop(Box::from_raw(ptr));
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use std::sync::Arc;
    use std::thread;
    use super::*;

    #[test]
    fn test_one() {
        let cell = Arc::new(AtomicOnceCell::new());

        let writer = {
            let cell = Arc::clone(&cell);
            thread::spawn(move || {
                assert_eq!(false, cell.is_set());
                assert_eq!(cell.set_once(123), true);
                assert_eq!(true, cell.is_set());
                assert_eq!(cell.set_once(456), false); // –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
            })
        };

        let readers: Vec<_> = (0..4).map(|_| {
            let cell = Arc::clone(&cell);
            thread::spawn(move || {
                while cell.get().is_none() {
                    thread::yield_now();
                }
                assert_eq!(true, cell.is_set());
                assert_eq!(cell.get(), Some(&123));
            })
        }).collect();

        writer.join().unwrap();
        for r in readers {
            r.join().unwrap();
        }
    }

    #[test]
    fn test_take_and_get_mut() {
        let mut cell = AtomicOnceCell::new();
        assert_eq!(cell.set_once(123), true);

        let r = cell.get_mut().unwrap();
        *r += 1;
        assert_eq!(cell.get(), Some(&124));

        assert_eq!(cell.take(), Some(124));
    }
    
    #[test]
    fn test_three() {
        let msg = "Some message for test!";
        example(msg);
    }

    fn example<'a>(s: &'a str) {
        let cell: AtomicOnceCell<&'a str> = AtomicOnceCell::new();
        cell.set_once(s);
        assert_eq!(cell.get(), Some(&"Some message for test!"));
    }
}
